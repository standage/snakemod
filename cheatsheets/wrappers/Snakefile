rule all:
    input:
        "analysis/sorted.bam.idxstats",
    run:
        print("Yay, all done!")



rule copyseq:
    input:
        r1=config["reads1"],
        r2=config["reads2"],
    output:
        left="seq/reads-R1.fastq",
        right="seq/reads-R2.fastq",
    shell:
        """
        cp {input.r1} {output.left}
        cp {input.r2} {output.right}
        """


rule downsample:
    input:
        r1=rules.copyseq.output.left,
        r2=rules.copyseq.output.right,
    output:
        left="seq/reads-subset-R1.fastq",
        right="seq/reads-subset-R2.fastq",
    params:
        numreads=config["sample_numreads"],
        seed=config["sample_seed"],
    shell:
        """
        seqtk sample -s{params.seed} {input.r1} {params.numreads} > {output.left}
        seqtk sample -s{params.seed} {input.r2} {params.numreads} > {output.right}
        """


rule spades:
    input:
        r1=rules.downsample.output.left,
        r2=rules.downsample.output.right,
    output:
        asmbl="analysis/spades/scaffolds.fasta",
    params:
        outdir="analysis/spades/",
    threads: 32
    shell:
        "spades.py -1 {input.r1} -2 {input.r2} -t {threads} -o {params.outdir} --careful"


rule index_assembly:
    input:
        asmbl=rules.spades.output.asmbl,
    output:
        index=expand(
            rules.spades.output.asmbl + ".{ext}",
            ext=("1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"),
        ),
    shell:
        "bowtie2-build {input.asmbl} {input.asmbl}"


rule map_back_reads:
    input:
        sample=[config["reads1"], config["reads2"]],
        index=expand(
            "analysis/spades/scaffolds.fasta.{ext}",
            ext=("1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"),
        ),
    output:
        pipe("analysis/unsorted.bam"),
    params:
        index=rules.index_assembly.input.asmbl,
        extra="",
    threads: workflow.cores - 1
    wrapper:
        "0.64.0/bio/bowtie2/align"


rule map_sort:
    input:
        "analysis/unsorted.bam",
    output:
        "analysis/sorted.bam",
    wrapper:
        "0.64.0/bio/samtools/sort"


rule index_bam:
    input:
        "analysis/sorted.bam",
    output:
        "analysis/sorted.bam.bai",
    wrapper:
        "0.64.0/bio/samtools/index"


rule bam_stats:
    input:
        bam="analysis/sorted.bam",
        idx="analysis/sorted.bam.bai",
    output:
        "analysis/sorted.bam.idxstats",
    wrapper:
        "0.64.0/bio/samtools/idxstats"
